//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::UserRole;
use super::sea_orm_active_enums::UserStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "user")]
#[serde(rename_all = "camelCase")]
#[schema(as = User)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(unique)]
    pub email: String,
    pub full_name: String,
    pub password: Option<String>,
    pub status: UserStatus,
    pub role: UserRole,
    pub created_at: chrono::DateTime<chrono::FixedOffset>,
    pub updated_at: chrono::DateTime<chrono::FixedOffset>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::address::Entity")]
    Address,
    #[sea_orm(has_many = "super::cart::Entity")]
    Cart,
    #[sea_orm(has_many = "super::checkout::Entity")]
    Checkout,
    #[sea_orm(has_many = "super::login_session::Entity")]
    LoginSession,
    #[sea_orm(has_many = "super::order::Entity")]
    Order,
}

impl Related<super::address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Address.def()
    }
}

impl Related<super::cart::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cart.def()
    }
}

impl Related<super::checkout::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Checkout.def()
    }
}

impl Related<super::login_session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoginSession.def()
    }
}

impl Related<super::order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Order.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
