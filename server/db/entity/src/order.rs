//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::OrderStatus;
use super::sea_orm_active_enums::PaymentMethod;
use sea_orm::entity::prelude::*;
use sea_orm::FromJsonQueryResult;
use serde::{ Deserialize, Serialize };
use utoipa::ToSchema;
use validator::Validate;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa::ToSchema)]
#[sea_orm(table_name = "order")]
#[serde(rename_all = "camelCase")]
#[schema(as = Order)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub product_id: String,
    pub user_id: String,
    pub quantity: i16,
    pub status: OrderStatus,
    pub payment_method: PaymentMethod,
    #[sea_orm(column_type = "JsonBinary")]
    pub address: OrderAddress,
    pub created_at: chrono::DateTime<chrono::FixedOffset>,
    pub updated_at: chrono::DateTime<chrono::FixedOffset>,
}

#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    Serialize,
    Deserialize,
    ToSchema,
    Validate,
    FromJsonQueryResult
)]
pub struct OrderAddress {
    pub first_name: String,
    pub last_name: String,
    pub postal_code: i32,
    pub city: String,
    pub state: String,
    pub full_address: String,
    pub phone_number: String,
    pub landmark: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::product::Entity",
        from = "Column::ProductId",
        to = "super::product::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Product,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Product.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
