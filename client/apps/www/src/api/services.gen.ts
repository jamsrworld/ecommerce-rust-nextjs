// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { HealthCheckError, HealthCheckResponse, AdminLoginData, AdminLoginError, AdminLoginResponse2, ForgotPasswordData, ForgotPasswordError, ForgotPasswordResponse, LoginData, LoginError, LoginResponse, LogoutError, LogoutResponse, RegisterData, RegisterError, RegisterResponse, RegisterVerifyData, RegisterVerifyError, RegisterVerifyResponse, ResetPasswordData, ResetPasswordError, ResetPasswordResponse, UpdateProfileData, UpdateProfileError, UpdateProfileResponse } from './types.gen';

export const client = createClient(createConfig());

export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
    ...options,
    url: '/'
}); };

/**
 * Login
 * Api to login for user
 */
export const adminLogin = <ThrowOnError extends boolean = false>(options: Options<AdminLoginData, ThrowOnError>) => { return (options?.client ?? client).post<AdminLoginResponse2, AdminLoginError, ThrowOnError>({
    ...options,
    url: '/admin/admin/login'
}); };

/**
 * Forgot Password
 */
export const forgotPassword = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordData, ThrowOnError>) => { return (options?.client ?? client).post<ForgotPasswordResponse, ForgotPasswordError, ThrowOnError>({
    ...options,
    url: '/auth/forgot-password'
}); };

/**
 * Login
 * Api to login for user
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => { return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
    ...options,
    url: '/auth/login'
}); };

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).delete<LogoutResponse, LogoutError, ThrowOnError>({
    ...options,
    url: '/auth/logout'
}); };

/**
 * Register
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => { return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
    ...options,
    url: '/auth/register'
}); };

/**
 * Register Verification
 */
export const registerVerify = <ThrowOnError extends boolean = false>(options: Options<RegisterVerifyData, ThrowOnError>) => { return (options?.client ?? client).post<RegisterVerifyResponse, RegisterVerifyError, ThrowOnError>({
    ...options,
    url: '/auth/register/verify'
}); };

/**
 * Reset Password
 */
export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => { return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
    ...options,
    url: '/auth/reset-password'
}); };

/**
 * Update Profile
 */
export const updateProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateProfileResponse, UpdateProfileError, ThrowOnError>({
    ...options,
    url: '/profile/me'
}); };