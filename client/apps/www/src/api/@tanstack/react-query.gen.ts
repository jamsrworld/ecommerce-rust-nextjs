// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client, healthCheck, adminLogin, forgotPassword, login, logout, register, registerVerify, resetPassword, updateProfile, getUser } from '../services.gen';
import type { AdminLoginData, AdminLoginError, AdminLoginResponse2, ForgotPasswordData, ForgotPasswordError, ForgotPasswordResponse, LoginData, LoginError, LoginResponse, LogoutError, LogoutResponse, RegisterData, RegisterError, RegisterResponse, RegisterVerifyData, RegisterVerifyError, RegisterVerifyResponse, ResetPasswordData, ResetPasswordError, ResetPasswordResponse, UpdateProfileData, UpdateProfileError, UpdateProfileResponse } from '../types.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const healthCheckQueryKey = (options?: Options) => [
    createQueryKey("healthCheck", options)
];

export const healthCheckOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await healthCheck({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: healthCheckQueryKey(options)
}); };

export const adminLoginQueryKey = (options: Options<AdminLoginData>) => [
    createQueryKey("adminLogin", options)
];

export const adminLoginOptions = (options: Options<AdminLoginData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await adminLogin({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: adminLoginQueryKey(options)
}); };

export const adminLoginMutation = (options?: Partial<Options<AdminLoginData>>) => { const mutationOptions: UseMutationOptions<AdminLoginResponse2, AdminLoginError, Options<AdminLoginData>> = {
    mutationFn: async (localOptions) => {
        const { data } = await adminLogin({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const forgotPasswordQueryKey = (options: Options<ForgotPasswordData>) => [
    createQueryKey("forgotPassword", options)
];

export const forgotPasswordOptions = (options: Options<ForgotPasswordData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await forgotPassword({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: forgotPasswordQueryKey(options)
}); };

export const forgotPasswordMutation = (options?: Partial<Options<ForgotPasswordData>>) => { const mutationOptions: UseMutationOptions<ForgotPasswordResponse, ForgotPasswordError, Options<ForgotPasswordData>> = {
    mutationFn: async (localOptions) => {
        const { data } = await forgotPassword({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const loginQueryKey = (options: Options<LoginData>) => [
    createQueryKey("login", options)
];

export const loginOptions = (options: Options<LoginData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await login({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: loginQueryKey(options)
}); };

export const loginMutation = (options?: Partial<Options<LoginData>>) => { const mutationOptions: UseMutationOptions<LoginResponse, LoginError, Options<LoginData>> = {
    mutationFn: async (localOptions) => {
        const { data } = await login({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const logoutMutation = (options?: Partial<Options>) => { const mutationOptions: UseMutationOptions<LogoutResponse, LogoutError, Options> = {
    mutationFn: async (localOptions) => {
        const { data } = await logout({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const registerQueryKey = (options: Options<RegisterData>) => [
    createQueryKey("register", options)
];

export const registerOptions = (options: Options<RegisterData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await register({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: registerQueryKey(options)
}); };

export const registerMutation = (options?: Partial<Options<RegisterData>>) => { const mutationOptions: UseMutationOptions<RegisterResponse, RegisterError, Options<RegisterData>> = {
    mutationFn: async (localOptions) => {
        const { data } = await register({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const registerVerifyQueryKey = (options: Options<RegisterVerifyData>) => [
    createQueryKey("registerVerify", options)
];

export const registerVerifyOptions = (options: Options<RegisterVerifyData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await registerVerify({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: registerVerifyQueryKey(options)
}); };

export const registerVerifyMutation = (options?: Partial<Options<RegisterVerifyData>>) => { const mutationOptions: UseMutationOptions<RegisterVerifyResponse, RegisterVerifyError, Options<RegisterVerifyData>> = {
    mutationFn: async (localOptions) => {
        const { data } = await registerVerify({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const resetPasswordQueryKey = (options: Options<ResetPasswordData>) => [
    createQueryKey("resetPassword", options)
];

export const resetPasswordOptions = (options: Options<ResetPasswordData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await resetPassword({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: resetPasswordQueryKey(options)
}); };

export const resetPasswordMutation = (options?: Partial<Options<ResetPasswordData>>) => { const mutationOptions: UseMutationOptions<ResetPasswordResponse, ResetPasswordError, Options<ResetPasswordData>> = {
    mutationFn: async (localOptions) => {
        const { data } = await resetPassword({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const updateProfileQueryKey = (options: Options<UpdateProfileData>) => [
    createQueryKey("updateProfile", options)
];

export const updateProfileOptions = (options: Options<UpdateProfileData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await updateProfile({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: updateProfileQueryKey(options)
}); };

export const updateProfileMutation = (options?: Partial<Options<UpdateProfileData>>) => { const mutationOptions: UseMutationOptions<UpdateProfileResponse, UpdateProfileError, Options<UpdateProfileData>> = {
    mutationFn: async (localOptions) => {
        const { data } = await updateProfile({
            ...options,
            ...localOptions,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getUserQueryKey = (options?: Options) => [
    createQueryKey("getUser", options)
];

export const getUserOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getUser({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getUserQueryKey(options)
}); };