// This file is auto-generated by @hey-api/openapi-ts

export const AdminBadRequestSchema = {
    type: 'object',
    required: ['message3', 'myName'],
    properties: {
        message3: {
            type: 'string'
        },
        myName: {
            type: 'string'
        }
    }
} as const;

export const AdminInternalServerErrorSchema = {
    type: 'object',
    required: ['message2', 'hisName'],
    properties: {
        hisName: {
            type: 'string'
        },
        message2: {
            type: 'string'
        }
    }
} as const;

export const AdminLoginInputSchema = {
    type: 'object',
    required: ['username', 'password', 'fullName'],
    properties: {
        fullName: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const AdminLoginResponseSchema = {
    type: 'object',
    required: ['message', 'username', 'yourName'],
    properties: {
        message: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        yourName: {
            type: 'string'
        }
    }
} as const;

export const AuthForgotPasswordInputSchema = {
    type: 'object',
    required: ['email'],
    properties: {
        email: {
            type: 'string',
            description: 'Email address of the user.',
            example: 'princeraj9137@gmail.com'
        }
    }
} as const;

export const AuthLoginInputSchema = {
    type: 'object',
    description: 'Credentials of the user.',
    required: ['email', 'password'],
    properties: {
        email: {
            type: 'string',
            description: 'Email address of the user.',
            example: 'princeraj9137@gmail.com'
        },
        password: {
            type: 'string',
            description: 'Password of the user.',
            example: 'admin790'
        }
    }
} as const;

export const AuthRegisterInputSchema = {
    type: 'object',
    required: ['fullName', 'email', 'password', 'confirmPassword'],
    properties: {
        confirmPassword: {
            type: 'string',
            description: 'Password Confirmation.',
            example: 'admin790'
        },
        email: {
            type: 'string',
            description: 'Email address of the user.',
            example: 'princeraj9137@gmail.com'
        },
        fullName: {
            type: 'string',
            description: 'Full name of the user.',
            example: 'Jamsr World'
        },
        password: {
            type: 'string',
            description: `Password of the user.
Min. 8 characters.`,
            example: 'admin790'
        }
    }
} as const;

export const AuthRegisterVerifyInputSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/AuthRegisterInput',
            description: 'The original Register struct fields.'
        },
        {
            type: 'object',
            required: ['code'],
            properties: {
                code: {
                    type: 'integer',
                    format: 'int32',
                    description: 'Verification code (OTP).',
                    example: 1234,
                    minimum: 0
                }
            }
        }
    ]
} as const;

export const AuthResetPasswordInputSchema = {
    type: 'object',
    required: ['email', 'otp', 'password', 'confirmPassword'],
    properties: {
        confirmPassword: {
            type: 'string',
            description: 'Password Confirmation.',
            example: 'admin790'
        },
        email: {
            type: 'string',
            description: 'Email address of the user.',
            example: 'princeraj9137@gmail.com'
        },
        otp: {
            type: 'integer',
            format: 'int32',
            description: 'Verification code (OTP).',
            example: 1234,
            minimum: 0
        },
        password: {
            type: 'string',
            description: 'New Password to set.',
            example: 'admin790'
        }
    }
} as const;

export const CreateAddressInputSchema = {
    type: 'object',
    required: ['firstName', 'lastName', 'phoneNumber', 'fullAddress', 'city', 'state', 'postalCode'],
    properties: {
        city: {
            type: 'string',
            description: 'City of the user.',
            maxLength: 50,
            minLength: 1
        },
        firstName: {
            type: 'string',
            description: 'First name of the user.',
            example: 'John',
            maxLength: 20,
            minLength: 1
        },
        fullAddress: {
            type: 'string',
            description: 'Address of the user.',
            maxLength: 300,
            minLength: 1
        },
        landmark: {
            type: ['string', 'null'],
            description: 'Landmark of the user.',
            maxLength: 200,
            minLength: 1
        },
        lastName: {
            type: 'string',
            description: 'Last name of the user.',
            example: 'Doe',
            maxLength: 20,
            minLength: 1
        },
        phoneNumber: {
            type: 'string',
            description: 'Phone number of the user.',
            example: '1234567890',
            maxLength: 10,
            minLength: 1
        },
        postalCode: {
            type: 'integer',
            format: 'int32',
            description: 'Postal Code of the user.',
            example: 123456,
            maximum: 999999,
            minimum: 100000
        },
        state: {
            type: 'string',
            description: 'State of the user.',
            maxLength: 50,
            minLength: 1
        }
    }
} as const;

export const CreateAddressResponseSchema = {
    type: 'object',
    required: ['message', 'data'],
    properties: {
        data: {
            '$ref': '#/components/schemas/Model'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const GetAddressResponseSchema = {
    type: 'object',
    required: ['data'],
    properties: {
        data: {
            '$ref': '#/components/schemas/Model'
        }
    }
} as const;

export const ModelSchema = {
    type: 'object',
    required: ['id', 'userId', 'firstName', 'lastName', 'postalCode', 'city', 'state', 'fullAddress', 'phoneNumber', 'isDefault', 'createdAt'],
    properties: {
        city: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        firstName: {
            type: 'string'
        },
        fullAddress: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        landmark: {
            type: ['string', 'null']
        },
        lastName: {
            type: 'string'
        },
        phoneNumber: {
            type: 'string'
        },
        postalCode: {
            type: 'integer',
            format: 'int32'
        },
        state: {
            type: 'string'
        },
        userId: {
            type: 'string'
        }
    }
} as const;

export const ResponseWithMessageSchema = {
    type: 'object',
    required: ['message'],
    properties: {
        message: {
            type: 'string'
        }
    }
} as const;

export const UpdateProfileSchema = {
    type: 'object',
    required: ['full_name'],
    properties: {
        full_name: {
            type: 'string'
        }
    }
} as const;

export const UserProfileSchema = {
    type: 'object',
    required: ['id', 'email', 'fullName', 'role'],
    properties: {
        email: {
            type: 'string'
        },
        fullName: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        }
    }
} as const;

export const UserRoleSchema = {
    type: 'string',
    enum: ['Admin', 'User']
} as const;