// This file is auto-generated by @hey-api/openapi-ts

export type Address = {
  city: string;
  createdAt: Date;
  firstName: string;
  fullAddress: string;
  id: string;
  isDefault: boolean;
  landmark?: string | null;
  lastName: string;
  phoneNumber: string;
  postalCode: number;
  state: string;
  userId: string;
};

export type AddressWithMessage = {
  data: Address;
  message: string;
};

export type AuthForgotPasswordInput = {
  /**
   * Email address of the user.
   */
  email: string;
};

/**
 * Credentials of the user.
 */
export type AuthLoginInput = {
  /**
   * Email address of the user.
   */
  email: string;
  /**
   * Password of the user.
   */
  password: string;
};

export type AuthRegisterInput = {
  /**
   * Password Confirmation.
   */
  confirmPassword: string;
  /**
   * Email address of the user.
   */
  email: string;
  /**
   * Full name of the user.
   */
  fullName: string;
  /**
   * Password of the user.
   * Min. 8 characters.
   */
  password: string;
};

export type AuthRegisterVerifyInput = AuthRegisterInput & {
  /**
   * Verification code (OTP).
   */
  code: number;
};

export type AuthResetPasswordInput = {
  /**
   * Password Confirmation.
   */
  confirmPassword: string;
  /**
   * Email address of the user.
   */
  email: string;
  /**
   * Verification code (OTP).
   */
  otp: number;
  /**
   * New Password to set.
   */
  password: string;
};

export type Cart = {
  createdAt: Date;
  id: string;
  productId: string;
  quantity: number;
  userId: string;
};

export type CartItemsWithProduct = {
  id: string;
  product: RelationProductItem;
  product_id: string;
  quantity: number;
};

export type CartItemWithMessage = {
  data: Cart;
  message: string;
};

export type CartUpdateQuantityInput = {
  quantity: number;
};

export type CartUserData = {
  count: number;
  items: Array<CartItemsWithProduct>;
  totalAmount: number;
};

export type CheckoutItemsWithProduct = {
  id: string;
  product: RelationProductItem;
  product_id: string;
  quantity: number;
};

export type CheckoutUserData = {
  addresses: Array<Address>;
  count: number;
  items: Array<CheckoutItemsWithProduct>;
  totalAmount: number;
};

export type ContinueWithGoogleInput =
  | GoogleLoginWithCredential
  | GoogleLoginWithCode;

export type CreateAddressInput = {
  /**
   * City of the user.
   */
  city: string;
  /**
   * First name of the user.
   */
  firstName: string;
  /**
   * Address of the user.
   */
  fullAddress: string;
  /**
   * Landmark of the user.
   */
  landmark?: string | null;
  /**
   * Last name of the user.
   */
  lastName: string;
  /**
   * Phone number of the user.
   */
  phoneNumber: string;
  /**
   * Postal Code of the user.
   */
  postalCode: number;
  /**
   * State of the user.
   */
  state: string;
};

export type GoogleLoginWithCode = {
  authorizationCode: string;
};

export type GoogleLoginWithCredential = {
  credential: string;
};

export type Image = {
  height: number;
  name: string;
  placeholder: string;
  url: string;
  width: number;
};

export type Order = {
  createdAt: Date;
  id: string;
  paymentMethod: PaymentMethod;
  productId: string;
  quantity: number;
  status: OrderStatus;
  updatedAt: Date;
  userId: string;
};

export enum OrderStatus {
  PENDING = "Pending",
  SUCCESS = "Success",
}

export type OrderWithProduct = {
  order: Order;
  product: RelationProductItem;
};

export enum PaymentMethod {
  BTCPAY = "Btcpay",
  NOWPAYMENTS = "Nowpayments",
  PAYPAL = "Paypal",
}

export type PlaceOrderSuccessMessage = {
  success: boolean;
};

export type ProceedCheckoutInput = {
  paymentMethod: PaymentMethod;
};

export type Product = {
  brand: string;
  category: string;
  color: string;
  createdAt: Date;
  description: Value;
  highlights: ProductHighlights;
  id: string;
  images: ProductImages;
  isReturnable: boolean;
  maximumOrder: number;
  minimumOrder: number;
  mrp: number;
  price: number;
  seo: ProductSeo;
  size: string;
  skuId: string;
  slug: string;
  status: ProductStatus;
  stock: number;
  style: string;
  tags: Array<string>;
  title: string;
  updatedAt: Date;
  video: ProductVideo;
};

export type ProductHighlight = {
  highlight: string;
};

export type ProductHighlights = Array<ProductHighlight>;

export type ProductImages = Array<Image>;

export type ProductSeo = {
  description: string;
  keywords: Array<string>;
  title: string;
};

export enum ProductStatus {
  PRIVATE = "Private",
  PUBLIC = "Public",
  UNLISTED = "Unlisted",
}

export type ProductVideo = {
  thumbnail: Image;
  url: string;
};

export type RelationProductItem = {
  brand: string;
  color: string;
  id: string;
  images: ProductImages;
  mrp: number;
  price: number;
  size: string;
  slug: string;
  style: string;
  title: string;
};

export type ResponseWithMessage = {
  message: string;
};

export type UpdateProfileInput = {
  fullName: string;
};

export type UserProfile = {
  email: string;
  fullName: string;
  id: string;
  role: UserRole;
};

export enum UserRole {
  ADMIN = "Admin",
  USER = "User",
}

export type Value = unknown;

export type HealthCheckResponse = string;

export type HealthCheckError = unknown;

export type GetAddressesResponse = Array<Address>;

export type GetAddressesError = ResponseWithMessage;

export type CreateAddressData = {
  body: CreateAddressInput;
};

export type CreateAddressResponse = AddressWithMessage;

export type CreateAddressError = ResponseWithMessage;

export type GetAddressData = {
  path: {
    /**
     * Address Id
     */
    id: string;
  };
};

export type GetAddressResponse = Address;

export type GetAddressError = ResponseWithMessage;

export type DeleteAddressData = {
  path: {
    /**
     * Address Id
     */
    id: string;
  };
};

export type DeleteAddressResponse = ResponseWithMessage;

export type DeleteAddressError = ResponseWithMessage;

export type UpdateAddressData = {
  body: CreateAddressInput;
  path: {
    /**
     * Address Id
     */
    id: string;
  };
};

export type UpdateAddressResponse = AddressWithMessage;

export type UpdateAddressError = ResponseWithMessage;

export type MarkDefaultAddressData = {
  path: {
    /**
     * Address Id
     */
    id: string;
  };
};

export type MarkDefaultAddressResponse = AddressWithMessage;

export type MarkDefaultAddressError = ResponseWithMessage;

export type ContinueWithGoogleData = {
  body: ContinueWithGoogleInput;
};

export type ContinueWithGoogleResponse = ResponseWithMessage;

export type ContinueWithGoogleError = ResponseWithMessage;

export type ForgotPasswordData = {
  body: AuthForgotPasswordInput;
};

export type ForgotPasswordResponse = ResponseWithMessage;

export type ForgotPasswordError = ResponseWithMessage;

export type LoginData = {
  body: AuthLoginInput;
};

export type LoginResponse = ResponseWithMessage;

export type LoginError = ResponseWithMessage;

export type LogoutResponse = ResponseWithMessage;

export type LogoutError = ResponseWithMessage;

export type RegisterData = {
  body: AuthRegisterInput;
};

export type RegisterResponse = ResponseWithMessage;

export type RegisterError = ResponseWithMessage;

export type RegisterVerifyData = {
  body: AuthRegisterVerifyInput;
};

export type RegisterVerifyResponse = ResponseWithMessage;

export type RegisterVerifyError = ResponseWithMessage;

export type ResetPasswordData = {
  body: AuthResetPasswordInput;
};

export type ResetPasswordResponse = ResponseWithMessage;

export type ResetPasswordError = ResponseWithMessage;

export type GetCartDataResponse = CartUserData;

export type GetCartDataError = ResponseWithMessage;

export type PlaceOrderResponse = PlaceOrderSuccessMessage;

export type PlaceOrderError = ResponseWithMessage;

export type AddCartItemData = {
  path: {
    /**
     * Product Id
     */
    id: string;
  };
};

export type AddCartItemResponse = Cart;

export type AddCartItemError = ResponseWithMessage;

export type UpdateCartItemQuantityData = {
  body: CartUpdateQuantityInput;
  path: {
    /**
     * Product Id
     */
    id: string;
  };
};

export type UpdateCartItemQuantityResponse = CartItemWithMessage;

export type UpdateCartItemQuantityError = ResponseWithMessage;

export type RemoveCartItemData = {
  path: {
    /**
     * Cart Item Id
     */
    id: string;
  };
};

export type RemoveCartItemResponse = ResponseWithMessage;

export type RemoveCartItemError = ResponseWithMessage;

export type GetCheckoutDataResponse = CheckoutUserData;

export type GetCheckoutDataError = ResponseWithMessage;

export type ProceedCheckoutData = {
  body: ProceedCheckoutInput;
};

export type ProceedCheckoutResponse = ResponseWithMessage;

export type ProceedCheckoutError = ResponseWithMessage;

export type CheckoutProductData = {
  path: {
    /**
     * Product Id
     */
    id: string;
  };
};

export type CheckoutProductResponse = ResponseWithMessage;

export type CheckoutProductError = ResponseWithMessage;

export type GetOrdersResponse = Array<OrderWithProduct>;

export type GetOrdersError = ResponseWithMessage;

export type GetOrderData = {
  path: {
    /**
     * Order Id
     */
    id: string;
  };
};

export type GetOrderResponse = OrderWithProduct;

export type GetOrderError = ResponseWithMessage;

export type GetProductsResponse = Array<Product>;

export type GetProductsError = ResponseWithMessage;

export type GetProductData = {
  path: {
    /**
     * Product Id
     */
    id: string;
  };
};

export type GetProductResponse = Product;

export type GetProductError = ResponseWithMessage;

export type GetProfileResponse = UserProfile;

export type GetProfileError = unknown;

export type UpdateProfileData = {
  body: UpdateProfileInput;
};

export type UpdateProfileResponse = ResponseWithMessage;

export type UpdateProfileError = unknown;

export type GetAddressesResponseTransformer = (
  data: any,
) => Promise<GetAddressesResponse>;

export type AddressModelResponseTransformer = (data: any) => Address;

export const AddressModelResponseTransformer: AddressModelResponseTransformer =
  (data) => {
    if (data?.createdAt) {
      data.createdAt = new Date(data.createdAt);
    }
    return data;
  };

export const GetAddressesResponseTransformer: GetAddressesResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(AddressModelResponseTransformer);
    }
    return data;
  };

export type CreateAddressResponseTransformer = (
  data: any,
) => Promise<CreateAddressResponse>;

export type AddressWithMessageModelResponseTransformer = (
  data: any,
) => AddressWithMessage;

export const AddressWithMessageModelResponseTransformer: AddressWithMessageModelResponseTransformer =
  (data) => {
    if (data?.data) {
      AddressModelResponseTransformer(data.data);
    }
    return data;
  };

export const CreateAddressResponseTransformer: CreateAddressResponseTransformer =
  async (data) => {
    AddressWithMessageModelResponseTransformer(data);
    return data;
  };

export type GetAddressResponseTransformer = (
  data: any,
) => Promise<GetAddressResponse>;

export const GetAddressResponseTransformer: GetAddressResponseTransformer =
  async (data) => {
    AddressModelResponseTransformer(data);
    return data;
  };

export type UpdateAddressResponseTransformer = (
  data: any,
) => Promise<UpdateAddressResponse>;

export const UpdateAddressResponseTransformer: UpdateAddressResponseTransformer =
  async (data) => {
    AddressWithMessageModelResponseTransformer(data);
    return data;
  };

export type MarkDefaultAddressResponseTransformer = (
  data: any,
) => Promise<MarkDefaultAddressResponse>;

export const MarkDefaultAddressResponseTransformer: MarkDefaultAddressResponseTransformer =
  async (data) => {
    AddressWithMessageModelResponseTransformer(data);
    return data;
  };

export type AddCartItemResponseTransformer = (
  data: any,
) => Promise<AddCartItemResponse>;

export type CartModelResponseTransformer = (data: any) => Cart;

export const CartModelResponseTransformer: CartModelResponseTransformer = (
  data,
) => {
  if (data?.createdAt) {
    data.createdAt = new Date(data.createdAt);
  }
  return data;
};

export const AddCartItemResponseTransformer: AddCartItemResponseTransformer =
  async (data) => {
    CartModelResponseTransformer(data);
    return data;
  };

export type UpdateCartItemQuantityResponseTransformer = (
  data: any,
) => Promise<UpdateCartItemQuantityResponse>;

export type CartItemWithMessageModelResponseTransformer = (
  data: any,
) => CartItemWithMessage;

export const CartItemWithMessageModelResponseTransformer: CartItemWithMessageModelResponseTransformer =
  (data) => {
    if (data?.data) {
      CartModelResponseTransformer(data.data);
    }
    return data;
  };

export const UpdateCartItemQuantityResponseTransformer: UpdateCartItemQuantityResponseTransformer =
  async (data) => {
    CartItemWithMessageModelResponseTransformer(data);
    return data;
  };

export type GetCheckoutDataResponseTransformer = (
  data: any,
) => Promise<GetCheckoutDataResponse>;

export type CheckoutUserDataModelResponseTransformer = (
  data: any,
) => CheckoutUserData;

export const CheckoutUserDataModelResponseTransformer: CheckoutUserDataModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.addresses)) {
      data.addresses.forEach(AddressModelResponseTransformer);
    }
    return data;
  };

export const GetCheckoutDataResponseTransformer: GetCheckoutDataResponseTransformer =
  async (data) => {
    CheckoutUserDataModelResponseTransformer(data);
    return data;
  };

export type GetOrdersResponseTransformer = (
  data: any,
) => Promise<GetOrdersResponse>;

export type OrderWithProductModelResponseTransformer = (
  data: any,
) => OrderWithProduct;

export type OrderModelResponseTransformer = (data: any) => Order;

export const OrderModelResponseTransformer: OrderModelResponseTransformer = (
  data,
) => {
  if (data?.createdAt) {
    data.createdAt = new Date(data.createdAt);
  }
  if (data?.updatedAt) {
    data.updatedAt = new Date(data.updatedAt);
  }
  return data;
};

export const OrderWithProductModelResponseTransformer: OrderWithProductModelResponseTransformer =
  (data) => {
    if (data?.order) {
      OrderModelResponseTransformer(data.order);
    }
    return data;
  };

export const GetOrdersResponseTransformer: GetOrdersResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(OrderWithProductModelResponseTransformer);
    }
    return data;
  };

export type GetOrderResponseTransformer = (
  data: any,
) => Promise<GetOrderResponse>;

export const GetOrderResponseTransformer: GetOrderResponseTransformer = async (
  data,
) => {
  OrderWithProductModelResponseTransformer(data);
  return data;
};

export type GetProductsResponseTransformer = (
  data: any,
) => Promise<GetProductsResponse>;

export type ProductModelResponseTransformer = (data: any) => Product;

export const ProductModelResponseTransformer: ProductModelResponseTransformer =
  (data) => {
    if (data?.createdAt) {
      data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
      data.updatedAt = new Date(data.updatedAt);
    }
    return data;
  };

export const GetProductsResponseTransformer: GetProductsResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(ProductModelResponseTransformer);
    }
    return data;
  };

export type GetProductResponseTransformer = (
  data: any,
) => Promise<GetProductResponse>;

export const GetProductResponseTransformer: GetProductResponseTransformer =
  async (data) => {
    ProductModelResponseTransformer(data);
    return data;
  };
