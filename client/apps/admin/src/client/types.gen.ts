// This file is auto-generated by @hey-api/openapi-ts

export type AdminLoginInput = {
  fullName: string;
  password: string;
  username: string;
};

export type AdminLoginResponse = {
  message: string;
  username: string;
  yourName: string;
};

export type AttributeModel = {
  createdAt: Date;
  id: string;
  isActive: boolean;
  name: string;
  values: Array<AttributeValue>;
};

export type AttributeValue = {
  value: string;
};

export type AttributeWithMessage = {
  data: AttributeModel;
  message: string;
};

export type Category = {
  category: string;
  id: string;
  title: string;
};

export type CreateAttributeInput = {
  /**
   * Name of the attribute.
   *
   */
  name: string;
  /**
   * Values of the attribute.
   */
  values: Array<AttributeValue>;
};

export type CreateCategoryInput = {
  /**
   * Title of the category.
   *
   */
  title: string;
};

export type CreateProductInput = {
  brand: string;
  category: string;
  color: string;
  description: unknown;
  highlights: ProductHighlights;
  images: ProductImages;
  isReturnable: boolean;
  maximumOrder: number;
  minimumOrder: number;
  mrp: number;
  price: number;
  seo: ProductSeo;
  size: string;
  skuId: string;
  status: ProductStatus;
  stock: number;
  style: string;
  tags: Array<string>;
  /**
   * Title of the product.
   *
   */
  title: string;
  video: ProductVideo;
};

export type Image = {
  height: number;
  name: string;
  placeholder: string;
  url: string;
  width: number;
};

export type Product = {
  brand: string;
  category: string;
  color: string;
  createdAt: Date;
  description: Value;
  highlights: ProductHighlights;
  id: string;
  images: ProductImages;
  isReturnable: boolean;
  maximumOrder: number;
  minimumOrder: number;
  mrp: number;
  price: number;
  seo: ProductSeo;
  size: string;
  skuId: string;
  slug: string;
  status: ProductStatus;
  stock: number;
  style: string;
  tags: Array<string>;
  title: string;
  updatedAt: Date;
  video: ProductVideo;
};

export type ProductHighlight = {
  highlight: string;
};

export type ProductHighlights = Array<ProductHighlight>;

export type ProductImages = Array<Image>;

export type ProductSeo = {
  description: string;
  keywords: Array<string>;
  title: string;
};

export enum ProductStatus {
  PRIVATE = "Private",
  PUBLIC = "Public",
  UNLISTED = "Unlisted",
}

export type ProductVideo = {
  thumbnail: Image;
  url: string;
};

export type ProductWithMessage = {
  data: Product;
  message: string;
};

export type ResponseWithMessage = {
  message: string;
};

export type SystemInfo = {
  cpuUsage: number;
  freeMemory: number;
  lastCron: Date;
  lastSuccessCron: Date;
  osHostname: string;
  osPlatform: string;
  osVersion: string;
  totalMemory: number;
  upTime: number;
};

export type UpdateAttributeStatusInput = {
  /**
   * Desired state of attribute.
   */
  isActive: boolean;
};

export type Value = unknown;

export type HealthCheckResponse = string;

export type HealthCheckError = unknown;

export type LoginData = {
  body: AdminLoginInput;
};

export type LoginResponse = AdminLoginResponse;

export type LoginError = ResponseWithMessage;

export type ServerInformationResponse = SystemInfo;

export type ServerInformationError = unknown;

export type GetAttributesResponse = Array<AttributeModel>;

export type GetAttributesError = unknown;

export type CreateAttributeData = {
  body: CreateAttributeInput;
};

export type CreateAttributeResponse = AttributeWithMessage;

export type CreateAttributeError = unknown;

export type GetAttributeData = {
  path: {
    /**
     * Attribute Id
     */
    id: string;
  };
};

export type GetAttributeResponse = AttributeModel;

export type GetAttributeError = unknown;

export type DeleteAttributeData = {
  path: {
    /**
     * Attribute Id
     */
    id: string;
  };
};

export type DeleteAttributeResponse = ResponseWithMessage;

export type DeleteAttributeError = unknown;

export type UpdateAttributeData = {
  body: CreateAttributeInput;
  path: {
    /**
     * Attribute Id
     */
    id: string;
  };
};

export type UpdateAttributeResponse = AttributeWithMessage;

export type UpdateAttributeError = unknown;

export type UpdateAttributeStatusData = {
  body: UpdateAttributeStatusInput;
  path: {
    /**
     * Attribute Id
     */
    id: string;
  };
};

export type UpdateAttributeStatusResponse = AttributeWithMessage;

export type UpdateAttributeStatusError = unknown;

export type GetCategoriesResponse = Array<Category>;

export type GetCategoriesError = unknown;

export type CreateCategoryData = {
  body: CreateCategoryInput;
};

export type CreateCategoryResponse = Category;

export type CreateCategoryError = unknown;

export type GetCategoryData = {
  path: {
    /**
     * Category Id
     */
    id: string;
  };
};

export type GetCategoryResponse = Category;

export type GetCategoryError = unknown;

export type DeleteCategoryData = {
  path: {
    /**
     * Category Id
     */
    id: string;
  };
};

export type DeleteCategoryResponse = ResponseWithMessage;

export type DeleteCategoryError = unknown;

export type UpdateCategoryData = {
  path: {
    /**
     * Category Id
     */
    id: string;
  };
};

export type UpdateCategoryResponse = Category;

export type UpdateCategoryError = unknown;

export type GetProductsResponse = Array<Product>;

export type GetProductsError = ResponseWithMessage;

export type CreateProductData = {
  body: CreateProductInput;
};

export type CreateProductResponse = ProductWithMessage;

export type CreateProductError = ResponseWithMessage;

export type GetProductData = {
  path: {
    /**
     * Product Id
     */
    id: string;
  };
};

export type GetProductResponse = Product;

export type GetProductError = ResponseWithMessage;

export type DeleteProductData = {
  path: {
    /**
     * Product Id
     */
    id: string;
  };
};

export type DeleteProductResponse = ResponseWithMessage;

export type DeleteProductError = ResponseWithMessage;

export type UpdateProductData = {
  body: CreateProductInput;
  path: {
    /**
     * Product Id
     */
    id: string;
  };
};

export type UpdateProductResponse = ProductWithMessage;

export type UpdateProductError = ResponseWithMessage;

export type ServerInformationResponseTransformer = (
  data: any,
) => Promise<ServerInformationResponse>;

export type SystemInfoModelResponseTransformer = (data: any) => SystemInfo;

export const SystemInfoModelResponseTransformer: SystemInfoModelResponseTransformer =
  (data) => {
    if (data?.lastCron) {
      data.lastCron = new Date(data.lastCron);
    }
    if (data?.lastSuccessCron) {
      data.lastSuccessCron = new Date(data.lastSuccessCron);
    }
    return data;
  };

export const ServerInformationResponseTransformer: ServerInformationResponseTransformer =
  async (data) => {
    SystemInfoModelResponseTransformer(data);
    return data;
  };

export type GetAttributesResponseTransformer = (
  data: any,
) => Promise<GetAttributesResponse>;

export type AttributeModelModelResponseTransformer = (
  data: any,
) => AttributeModel;

export const AttributeModelModelResponseTransformer: AttributeModelModelResponseTransformer =
  (data) => {
    if (data?.createdAt) {
      data.createdAt = new Date(data.createdAt);
    }
    return data;
  };

export const GetAttributesResponseTransformer: GetAttributesResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(AttributeModelModelResponseTransformer);
    }
    return data;
  };

export type CreateAttributeResponseTransformer = (
  data: any,
) => Promise<CreateAttributeResponse>;

export type AttributeWithMessageModelResponseTransformer = (
  data: any,
) => AttributeWithMessage;

export const AttributeWithMessageModelResponseTransformer: AttributeWithMessageModelResponseTransformer =
  (data) => {
    if (data?.data) {
      AttributeModelModelResponseTransformer(data.data);
    }
    return data;
  };

export const CreateAttributeResponseTransformer: CreateAttributeResponseTransformer =
  async (data) => {
    AttributeWithMessageModelResponseTransformer(data);
    return data;
  };

export type GetAttributeResponseTransformer = (
  data: any,
) => Promise<GetAttributeResponse>;

export const GetAttributeResponseTransformer: GetAttributeResponseTransformer =
  async (data) => {
    AttributeModelModelResponseTransformer(data);
    return data;
  };

export type UpdateAttributeResponseTransformer = (
  data: any,
) => Promise<UpdateAttributeResponse>;

export const UpdateAttributeResponseTransformer: UpdateAttributeResponseTransformer =
  async (data) => {
    AttributeWithMessageModelResponseTransformer(data);
    return data;
  };

export type UpdateAttributeStatusResponseTransformer = (
  data: any,
) => Promise<UpdateAttributeStatusResponse>;

export const UpdateAttributeStatusResponseTransformer: UpdateAttributeStatusResponseTransformer =
  async (data) => {
    AttributeWithMessageModelResponseTransformer(data);
    return data;
  };

export type GetProductsResponseTransformer = (
  data: any,
) => Promise<GetProductsResponse>;

export type ProductModelResponseTransformer = (data: any) => Product;

export const ProductModelResponseTransformer: ProductModelResponseTransformer =
  (data) => {
    if (data?.createdAt) {
      data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
      data.updatedAt = new Date(data.updatedAt);
    }
    return data;
  };

export const GetProductsResponseTransformer: GetProductsResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(ProductModelResponseTransformer);
    }
    return data;
  };

export type CreateProductResponseTransformer = (
  data: any,
) => Promise<CreateProductResponse>;

export type ProductWithMessageModelResponseTransformer = (
  data: any,
) => ProductWithMessage;

export const ProductWithMessageModelResponseTransformer: ProductWithMessageModelResponseTransformer =
  (data) => {
    if (data?.data) {
      ProductModelResponseTransformer(data.data);
    }
    return data;
  };

export const CreateProductResponseTransformer: CreateProductResponseTransformer =
  async (data) => {
    ProductWithMessageModelResponseTransformer(data);
    return data;
  };

export type GetProductResponseTransformer = (
  data: any,
) => Promise<GetProductResponse>;

export const GetProductResponseTransformer: GetProductResponseTransformer =
  async (data) => {
    ProductModelResponseTransformer(data);
    return data;
  };

export type UpdateProductResponseTransformer = (
  data: any,
) => Promise<UpdateProductResponse>;

export const UpdateProductResponseTransformer: UpdateProductResponseTransformer =
  async (data) => {
    ProductWithMessageModelResponseTransformer(data);
    return data;
  };
