// This file is auto-generated by @hey-api/openapi-ts

export const AdminLoginInputSchema = {
    type: 'object',
    required: ['username', 'password', 'fullName'],
    properties: {
        fullName: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const AdminLoginResponseSchema = {
    type: 'object',
    required: ['message', 'username', 'yourName'],
    properties: {
        message: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        yourName: {
            type: 'string'
        }
    }
} as const;

export const AttributeModelSchema = {
    type: 'object',
    required: ['id', 'name', 'values', 'isActive', 'createdAt'],
    properties: {
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'string'
        },
        isActive: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        values: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AttributeValue'
            }
        }
    }
} as const;

export const AttributeValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            type: 'string',
            maxLength: 50,
            minLength: 1
        }
    }
} as const;

export const AttributeWithMessageSchema = {
    type: 'object',
    required: ['message', 'data'],
    properties: {
        data: {
            '$ref': '#/components/schemas/AttributeModel'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const CategorySchema = {
    type: 'object',
    required: ['id', 'title', 'category'],
    properties: {
        category: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        title: {
            type: 'string'
        }
    }
} as const;

export const CreateAttributeInputSchema = {
    type: 'object',
    required: ['name', 'values'],
    properties: {
        name: {
            type: 'string',
            description: `Name of the attribute.
`,
            example: 'Color',
            maxLength: 50,
            minLength: 1
        },
        values: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AttributeValue'
            },
            description: 'Values of the attribute.'
        }
    }
} as const;

export const CreateCategoryInputSchema = {
    type: 'object',
    required: ['title'],
    properties: {
        title: {
            type: 'string',
            description: `Title of the category.
`,
            example: 'Color',
            maxLength: 50,
            minLength: 1
        }
    }
} as const;

export const CreateProductInputSchema = {
    type: 'object',
    required: ['title', 'description', 'category', 'brand', 'color', 'size', 'style', 'highlights', 'images', 'isReturnable', 'maximumOrder', 'minimumOrder', 'mrp', 'price', 'seo', 'skuId', 'stock', 'tags', 'video', 'status'],
    properties: {
        brand: {
            type: 'string'
        },
        category: {
            type: 'string'
        },
        color: {
            type: 'string'
        },
        description: {},
        highlights: {
            '$ref': '#/components/schemas/ProductHighlights'
        },
        images: {
            '$ref': '#/components/schemas/ProductImages'
        },
        isReturnable: {
            type: 'boolean'
        },
        maximumOrder: {
            type: 'integer',
            format: 'int32'
        },
        minimumOrder: {
            type: 'integer',
            format: 'int32'
        },
        mrp: {
            type: 'number',
            format: 'double'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        seo: {
            '$ref': '#/components/schemas/ProductSeo'
        },
        size: {
            type: 'string'
        },
        skuId: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/ProductStatus'
        },
        stock: {
            type: 'integer',
            format: 'int32'
        },
        style: {
            type: 'string'
        },
        tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        title: {
            type: 'string',
            description: `Title of the product.
`,
            example: 'Color',
            maxLength: 50,
            minLength: 1
        },
        video: {
            '$ref': '#/components/schemas/ProductVideo'
        }
    }
} as const;

export const ImageSchema = {
    type: 'object',
    required: ['name', 'url', 'placeholder', 'width', 'height'],
    properties: {
        height: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        placeholder: {
            type: 'string'
        },
        url: {
            type: 'string'
        },
        width: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const ProductSchema = {
    type: 'object',
    required: ['id', 'title', 'slug', 'description', 'category', 'brand', 'color', 'size', 'style', 'highlights', 'images', 'isReturnable', 'maximumOrder', 'minimumOrder', 'mrp', 'price', 'seo', 'skuId', 'status', 'stock', 'tags', 'video', 'createdAt', 'updatedAt'],
    properties: {
        brand: {
            type: 'string'
        },
        category: {
            type: 'string'
        },
        color: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        description: {
            '$ref': '#/components/schemas/Value'
        },
        highlights: {
            '$ref': '#/components/schemas/ProductHighlights'
        },
        id: {
            type: 'string'
        },
        images: {
            '$ref': '#/components/schemas/ProductImages'
        },
        isReturnable: {
            type: 'boolean'
        },
        maximumOrder: {
            type: 'integer',
            format: 'int32'
        },
        minimumOrder: {
            type: 'integer',
            format: 'int32'
        },
        mrp: {
            type: 'number',
            format: 'double'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        seo: {
            '$ref': '#/components/schemas/ProductSeo'
        },
        size: {
            type: 'string'
        },
        skuId: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/ProductStatus'
        },
        stock: {
            type: 'integer',
            format: 'int32'
        },
        style: {
            type: 'string'
        },
        tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        title: {
            type: 'string'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        video: {
            '$ref': '#/components/schemas/ProductVideo'
        }
    }
} as const;

export const ProductHighlightSchema = {
    type: 'object',
    required: ['highlight', 'description'],
    properties: {
        description: {
            type: 'string'
        },
        highlight: {
            type: 'string'
        }
    }
} as const;

export const ProductHighlightsSchema = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/ProductHighlight'
    }
} as const;

export const ProductImagesSchema = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Image'
    }
} as const;

export const ProductSeoSchema = {
    type: 'object',
    required: ['title', 'description', 'keywords'],
    properties: {
        description: {
            type: 'string'
        },
        keywords: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        title: {
            type: 'string'
        }
    }
} as const;

export const ProductStatusSchema = {
    type: 'string',
    enum: ['Private', 'Public', 'Unlisted']
} as const;

export const ProductVideoSchema = {
    type: 'object',
    required: ['url', 'thumbnail'],
    properties: {
        thumbnail: {
            '$ref': '#/components/schemas/Image'
        },
        url: {
            type: 'string'
        }
    }
} as const;

export const ProductWithMessageSchema = {
    type: 'object',
    required: ['message', 'data'],
    properties: {
        data: {
            '$ref': '#/components/schemas/Product'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const ResponseWithMessageSchema = {
    type: 'object',
    required: ['message'],
    properties: {
        message: {
            type: 'string'
        }
    }
} as const;

export const SystemInfoSchema = {
    type: 'object',
    required: ['lastCron', 'lastSuccessCron', 'osHostname', 'totalMemory', 'freeMemory', 'osPlatform', 'osVersion', 'upTime', 'cpuUsage'],
    properties: {
        cpuUsage: {
            type: 'number',
            format: 'float'
        },
        freeMemory: {
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        lastCron: {
            type: 'string',
            format: 'date-time'
        },
        lastSuccessCron: {
            type: 'string',
            format: 'date-time'
        },
        osHostname: {
            type: 'string'
        },
        osPlatform: {
            type: 'string'
        },
        osVersion: {
            type: 'string'
        },
        totalMemory: {
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        upTime: {
            type: 'integer',
            format: 'int64',
            minimum: 0
        }
    }
} as const;

export const UpdateAttributeStatusInputSchema = {
    type: 'object',
    required: ['isActive'],
    properties: {
        isActive: {
            type: 'boolean',
            description: 'Desired state of attribute.'
        }
    }
} as const;

export const ValueSchema = {} as const;